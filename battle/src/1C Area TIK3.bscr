% Script File: 1C Area TIK3.bscr
% Decoded from: 6186F0 to 623BA0 (1C Area TIK3)

#new:Function $Function_80218000
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	DADDU     S1, A0, R0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       {Func:GetVariable}
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	DADDU     A0, S1, R0
	JAL       {Func:GetVariable}
	DADDU     S3, V0, R0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	DADDU     A0, S1, R0
	JAL       {Func:GetVariable}
	DADDU     S2, V0, R0
	DADDU     A0, S1, R0
	LW        A1, 0 (S0)
	JAL       {Func:GetVariable}
	DADDU     S0, V0, R0
	LW        A0, 148 (S1)
	JAL       {Func:GetActor}
	DADDU     S1, V0, R0
	DADDU     V1, V0, R0
	LW        V0, 8 (V1)
	LBU       V0, 24 (V0)
	LW        A0, 8 (V1)
	SUBU      S3, S3, V0
	SB        S3, 194 (V1)
	LBU       V0, 25 (A0)
	SUBU      S2, S2, V0
	SB        S2, 195 (V1)
	LBU       V0, 26 (A0)
	SUBU      S0, S0, V0
	SB        S0, 196 (V1)
	LBU       A0, 27 (A0)
	SUBU      S1, S1, A0
	SB        S1, 197 (V1)
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28

PADDING: 802180CC to 802180D0 (006187BC to 006187C0)
00000000 

#new:Function $Function_802180D0
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	DADDU     S1, A0, R0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       {Func:GetVariable}
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	DADDU     A0, S1, R0
	JAL       {Func:GetVariable}
	DADDU     S3, V0, R0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	DADDU     A0, S1, R0
	JAL       {Func:GetVariable}
	DADDU     S2, V0, R0
	DADDU     A0, S1, R0
	LW        A1, 0 (S0)
	JAL       {Func:GetVariable}
	DADDU     S0, V0, R0
	LW        A0, 148 (S1)
	JAL       {Func:GetActor}
	DADDU     S1, V0, R0
	DADDU     V1, V0, R0
	LW        V0, 8 (V1)
	LBU       V0, 24 (V0)
	LW        A0, 8 (V1)
	SUBU      S3, S3, V0
	SB        S3, 194 (V1)
	LBU       V0, 25 (A0)
	SUBU      S2, S2, V0
	SB        S2, 195 (V1)
	LBU       V0, 26 (A0)
	SUBU      S0, S0, V0
	SB        S0, 196 (V1)
	LBU       A0, 27 (A0)
	SUBU      S1, S1, A0
	SB        S1, 197 (V1)
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28

#new:Function $Function_8021819C
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	DADDU     S1, A0, R0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       {Func:GetVariable}
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	DADDU     A0, S1, R0
	JAL       {Func:GetVariable}
	DADDU     S3, V0, R0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	DADDU     A0, S1, R0
	JAL       {Func:GetVariable}
	DADDU     S2, V0, R0
	DADDU     A0, S1, R0
	LW        A1, 0 (S0)
	JAL       {Func:GetVariable}
	DADDU     S0, V0, R0
	MTC1      S3, F12
	NOP
	CVT.S.W   F12, F12
	MTC1      S2, F14
	NOP
	CVT.S.W   F14, F14
	MTC1      S0, F0
	NOP
	CVT.S.W   F0, F0
	MFC1      A2, F0
	JAL       802D7460
	DADDU     A3, V0, R0
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28

#new:Function $Function_80218250
	ADDIU     SP, SP, FFD8
	SW        S1, 14 (SP)
	DADDU     S1, A0, R0
	SW        RA, 20 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S0, 10 (SP)
	LW        S0, C (S1)
	LW        A1, 0 (S0)
	JAL       {Func:GetVariable}
	ADDIU     S0, S0, 4
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	DADDU     A0, S1, R0
	JAL       {Func:GetVariable}
	DADDU     S3, V0, R0
	LW        A1, 0 (S0)
	ADDIU     S0, S0, 4
	DADDU     A0, S1, R0
	JAL       {Func:GetVariable}
	DADDU     S2, V0, R0
	DADDU     A0, S1, R0
	LW        A1, 0 (S0)
	JAL       {Func:GetVariable}
	DADDU     S0, V0, R0
	MTC1      S3, F12
	NOP
	CVT.S.W   F12, F12
	MTC1      S2, F14
	NOP
	CVT.S.W   F14, F14
	MTC1      S0, F0
	NOP
	CVT.S.W   F0, F0
	MFC1      A2, F0
	JAL       802D74C0
	DADDU     A3, V0, R0
	LW        RA, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28

PADDING: 80218304 to 80218310 (006189F4 to 00618A00)
00000000 00000000 00000000 

#new:Function $Function_80218310
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	DADDU     S4, A0, R0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       {Func:GetVariable}
	LW        A1, 0 (V0)
	JAL       8011B010
	DADDU     A0, V0, R0
	JAL       8011AD30
	DADDU     A0, V0, R0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	DADDU     S1, V0, R0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       80061EF0
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	DADDU     S3, R0, R0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       80061EF0
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	DADDU     S3, R0, R0
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	DADDU     S3, R0, R0
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       80061EF0
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       80061EF0
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50

PADDING: 802187A4 to 802187B0 (00618E94 to 00618EA0)
00000000 00000000 00000000 

#new:Function $Function_802187B0
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	DADDU     S4, A0, R0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       {Func:GetVariable}
	LW        A1, 0 (V0)
	JAL       8011B010
	DADDU     A0, V0, R0
	JAL       8011AD30
	DADDU     A0, V0, R0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	DADDU     S1, V0, R0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       80061EF0
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	DADDU     S3, R0, R0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       80061EF0
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	DADDU     S3, R0, R0
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	DADDU     S3, R0, R0
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       80061EF0
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       80061EF0
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50

PADDING: 80218C44 to 80218C50 (00619334 to 00619340)
00000000 00000000 00000000 

#new:Function $Function_80218C50
	ADDIU     SP, SP, FFB0
	SW        S4, 20 (SP)
	DADDU     S4, A0, R0
	SW        RA, 28 (SP)
	SW        S5, 24 (SP)
	SW        S3, 1C (SP)
	SW        S2, 18 (SP)
	SW        S1, 14 (SP)
	SW        S0, 10 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S4)
	JAL       {Func:GetVariable}
	LW        A1, 0 (V0)
	JAL       8011B010
	DADDU     A0, V0, R0
	JAL       8011AD30
	DADDU     A0, V0, R0
	LIA       S2, 800DC070
	SW        R0, 8C (S4)
	LW        S0, D8 (S2)
	BEQ       S0, R0, .o154
	DADDU     S1, V0, R0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .oE4
	NOP
	JAL       80061EF0
	NOP
	MOV.S     F2, F0
	.oE4
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o154
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o154
	NOP
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o154
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o154
	LW        S0, DC (S2)
	BEQ       S0, R0, .o260
	DADDU     S3, R0, R0
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	LIF       F0, 1.5
	NOP
	SUB.S     F2, F2, F0
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F2, F12
	C.EQ.S    F2, F2
	NOP
	BC1T      .o1DC
	NOP
	JAL       80061EF0
	NOP
	MOV.S     F2, F0
	.o1DC
	MTC1      R0, F0
	NOP
	C.LT.S    F0, F20
	NOP
	BC1F      .o25C
	MOV.S     F4, F2
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o260
	DADDU     S3, R0, R0
	LBU       V0, 190 (S0)
	LIF       F2, 0.5
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F2
	NOP
	C.LT.S    F4, F0
	NOP
	BC1F      .o260
	ADDIU     V0, R0, 1
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o24C
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o254
	BEQ       R0, R0, .o45C
	SW        V0, 8C (S4)
	.o25C
	DADDU     S3, R0, R0
	.o260
	LUI       S5, 10
	LIF       F26, 1.5
	MTC1      R0, F24
	LIF       F22, 0.5
	.o278
	LW        S0, E0 (S2)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	LW        V0, 0 (S0)
	ANDI      V0, V0, 1
	BNEL      V0, R0, .o450
	ADDIU     S3, S3, 1
	LWC1      F2, 144 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 14C (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 191 (S0)
	LWC1      F2, 148 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	ADD.S     F2, F2, F0
	SUB.S     F2, F2, F26
	ADD.S     F12, F6, F4
	LWC1      F0, 9C (S1)
	SUB.S     F20, F2, F0
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o300
	NOP
	JAL       80061EF0
	NOP
	.o300
	C.LT.S    F24, F20
	NOP
	BC1F      .o358
	MOV.S     F4, F0
	LBU       V0, 191 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o358
	NOP
	LBU       V0, 190 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o24C
	ADDIU     V0, R0, 1
	.o358
	LW        S0, 1F4 (S0)
	BEQL      S0, R0, .o450
	ADDIU     S3, S3, 1
	.o364
	LW        V1, 0 (S0)
	ANDI      V0, V1, 1
	BNE       V0, R0, .o440
	AND       V0, V1, S5
	BEQ       V0, R0, .o440
	NOP
	LWC1      F2, 58 (S0)
	LWC1      F0, 98 (S1)
	SUB.S     F2, F2, F0
	MUL.S     F6, F2, F2
	NOP
	LWC1      F0, A0 (S1)
	LWC1      F2, 60 (S0)
	SUB.S     F2, F2, F0
	MUL.S     F4, F2, F2
	NOP
	LBU       V0, 73 (S0)
	LWC1      F0, 5C (S0)
	MTC1      V0, F2
	NOP
	CVT.S.W   F2, F2
	ADD.S     F0, F0, F2
	SUB.S     F0, F0, F26
	ADD.S     F12, F6, F4
	LWC1      F2, 9C (S1)
	SUB.S     F20, F0, F2
	SQRT.S    F0, F12
	C.EQ.S    F0, F0
	NOP
	BC1T      .o3E8
	NOP
	JAL       80061EF0
	NOP
	.o3E8
	C.LT.S    F24, F20
	NOP
	BC1F      .o440
	MOV.S     F4, F0
	LBU       V0, 73 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	C.LT.S    F20, F0
	NOP
	BC1F      .o440
	NOP
	LBU       V0, 72 (S0)
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	MUL.S     F0, F0, F22
	NOP
	C.LT.S    F4, F0
	NOP
	BC1T      .o254
	ADDIU     V0, R0, 1
	.o440
	LW        S0, C (S0)
	BNE       S0, R0, .o364
	NOP
	ADDIU     S3, S3, 1
	.o450
	SLTI      V0, S3, 18
	BNE       V0, R0, .o278
	ADDIU     S2, S2, 4
	.o45C
	ADDIU     V0, R0, 2
	LW        RA, 28 (SP)
	LW        S5, 24 (SP)
	LW        S4, 20 (SP)
	LW        S3, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 50

PADDING: 802190E4 to 802190F0 (006197D4 to 006197E0)
00000000 00000000 00000000 

% Origin: HEURISTIC
#new:Function $Function_802190F0
	ADDIU     SP, SP, FFA0
	SW        S0, 20 (SP)
	DADDU     S0, A0, R0
	SW        RA, 28 (SP)
	SW        S1, 24 (SP)
	SDC1      F30, 58 (SP)
	SDC1      F28, 50 (SP)
	SDC1      F26, 48 (SP)
	SDC1      F24, 40 (SP)
	SDC1      F22, 38 (SP)
	SDC1      F20, 30 (SP)
	LW        V0, C (S0)
	JAL       {Func:GetVariable}
	LW        A1, 0 (V0)
	DADDU     S1, V0, R0
	ADDIU     A0, R0, 1
	BEQ       S1, A0, .o100
	SW        S1, 70 (S0)
	SLTI      V0, S1, 2
	BEQ       V0, R0, .o64
	ADDIU     V0, R0, 2
	BEQ       S1, R0, .o7C
	ADDIU     V0, R0, 8E
	BEQ       R0, R0, .o400
	NOP
	.o64
	BEQ       S1, V0, .o27C
	ADDIU     V0, R0, 3
	BEQ       S1, V0, .oBC
	ADDIU     V1, R0, 5B
	BEQ       R0, R0, .o400
	NOP
	.o7C
	LIF       F4, 142.0
	LIF       F30, -118.0
	ADDIU     V1, R0, FF8A
	SW        R0, 14 (SP)
	SWC1      F4, 10 (SP)
	SW        V0, 90 (S0)
	ADDIU     V0, R0, 2C
	SW        V0, 9C (S0)
	ADDIU     V0, R0, 3
	SW        R0, 94 (S0)
	SW        V1, 98 (S0)
	SW        V1, A0 (S0)
	BEQ       R0, R0, .oF0
	SW        V0, A4 (S0)
	.oBC
	LIF       F4, 91.0
	LIF       F30, -118.0
	ADDIU     V0, R0, FF8A
	SW        R0, 14 (SP)
	SWC1      F4, 10 (SP)
	SW        V1, 90 (S0)
	SW        R0, 94 (S0)
	SW        V0, 98 (S0)
	SW        V1, 9C (S0)
	SW        V0, A0 (S0)
	SW        S1, A4 (S0)
	.oF0
	SW        R0, A8 (S0)
	SW        R0, B0 (S0)
	BEQ       R0, R0, .o400
	SW        A0, 70 (S0)
	.o100
	LW        V0, A8 (S0)
	LW        V1, A4 (S0)
	ADDU      V0, V0, V1
	SW        V0, A8 (S0)
	SLTI      V0, V0, 2E
	BNE       V0, R0, .o124
	NOP
	ADDIU     V0, R0, 2D
	SW        V0, A8 (S0)
	.o124
	LWC1      F4, 90 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 10 (SP)
	LWC1      F4, 94 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	LIO       AT, 40C90FD0
	MTC1      AT, F26
	LWC1      F30, 98 (S0)
	CVT.S.W   F30, F30
	MUL.S     F12, F12, F26
	NOP
	LWC1      F28, 9C (S0)
	CVT.S.W   F28, F28
	LIF       F24, 360.0
	LWC1      F4, A0 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 18 (SP)
	JAL       {Func:SinRad}
	DIV.S     F12, F12, F24
	CVT.D.S   F0, F0
	LIF       F23, 1.875
	MTC1      R0, F22
	LWC1      F4, 10 (SP)
	SUB.D     F0, F22, F0
	CVT.D.S   F20, F4
	MUL.D     F20, F20, F0
	NOP
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	JAL       {Func:SinRad}
	DIV.S     F12, F12, F24
	MUL.S     F0, F28, F0
	NOP
	LW        V0, A8 (S0)
	SLL       V0, V0, 1
	MTC1      V0, F12
	NOP
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	DIV.S     F12, F12, F24
	CVT.S.D   F20, F20
	JAL       {Func:SinRad}
	SWC1      F20, 10 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	LIF       F2, 90.0
	NOP
	MUL.S     F0, F0, F2
	NOP
	LWC1      F4, 14 (SP)
	ADD.S     F4, F4, F0
	DIV.S     F12, F12, F24
	JAL       {Func:SinRad}
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	SUB.D     F22, F22, F0
	CVT.D.S   F20, F30
	MUL.D     F20, F20, F22
	NOP
	JAL       {Func:SinRad}
	DIV.S     F12, F12, F24
	LWC1      F4, 18 (SP)
	MUL.S     F0, F4, F0
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	BEQ       R0, R0, .o3F0
	ADDIU     V0, R0, 2D
	.o27C
	LW        V0, A8 (S0)
	LW        V1, A4 (S0)
	ADDU      V0, V0, V1
	SW        V0, A8 (S0)
	SLTI      V0, V0, 5B
	BNE       V0, R0, .o29C
	ADDIU     V0, R0, 5A
	SW        V0, A8 (S0)
	.o29C
	LWC1      F4, 90 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 10 (SP)
	LWC1      F4, 94 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	LIO       AT, 40C90FD0
	MTC1      AT, F26
	LWC1      F30, 98 (S0)
	CVT.S.W   F30, F30
	MUL.S     F12, F12, F26
	NOP
	LWC1      F28, 9C (S0)
	CVT.S.W   F28, F28
	LIF       F24, 360.0
	LWC1      F4, A0 (S0)
	CVT.S.W   F4, F4
	SWC1      F4, 18 (SP)
	JAL       {Func:SinRad}
	DIV.S     F12, F12, F24
	CVT.D.S   F0, F0
	LIF       F23, 1.875
	MTC1      R0, F22
	LWC1      F4, 10 (SP)
	SUB.D     F0, F22, F0
	CVT.D.S   F20, F4
	MUL.D     F20, F20, F0
	NOP
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	JAL       {Func:SinRad}
	DIV.S     F12, F12, F24
	MUL.S     F0, F28, F0
	NOP
	LW        V0, A8 (S0)
	SLL       V0, V0, 1
	MTC1      V0, F12
	NOP
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	DIV.S     F12, F12, F24
	CVT.S.D   F20, F20
	JAL       {Func:SinRad}
	SWC1      F20, 10 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	LIF       F2, 90.0
	NOP
	MUL.S     F0, F0, F2
	NOP
	LWC1      F4, 14 (SP)
	ADD.S     F4, F4, F0
	DIV.S     F12, F12, F24
	JAL       {Func:SinRad}
	SWC1      F4, 14 (SP)
	LWC1      F12, A8 (S0)
	CVT.S.W   F12, F12
	MUL.S     F12, F12, F26
	NOP
	CVT.D.S   F0, F0
	SUB.D     F22, F22, F0
	CVT.D.S   F20, F30
	MUL.D     F20, F20, F22
	NOP
	JAL       {Func:SinRad}
	DIV.S     F12, F12, F24
	LWC1      F4, 18 (SP)
	MUL.S     F0, F4, F0
	NOP
	CVT.D.S   F0, F0
	ADD.D     F20, F20, F0
	ADDIU     V0, R0, 5A
	.o3F0
	LW        V1, A8 (S0)
	BNE       V1, V0, .o400
	CVT.S.D   F30, F20
	SW        S1, B0 (S0)
	.o400
	LWC1      F4, 10 (SP)
	TRUNC.W.S F4, F4
	SWC1      F4, 84 (S0)
	LWC1      F4, 14 (SP)
	TRUNC.W.S F4, F4
	SWC1      F4, 88 (S0)
	TRUNC.W.S F4, F30
	SWC1      F4, 8C (S0)
	LW        RA, 28 (SP)
	LW        S1, 24 (SP)
	LW        S0, 20 (SP)
	LDC1      F30, 58 (SP)
	LDC1      F28, 50 (SP)
	LDC1      F26, 48 (SP)
	LDC1      F24, 40 (SP)
	LDC1      F22, 38 (SP)
	LDC1      F20, 30 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 60

#new:Function $Function_80219540
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	DADDU     S0, A0, R0
	SW        RA, 14 (SP)
	LW        V1, A8 (S0)
	LW        V0, 88 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o30
	SW        V1, A8 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o40
	ADDU      V0, V1, V0
	.o30
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o44
	SUBU      V0, V1, A0
	.o40
	SW        V0, A8 (S0)
	.o44
	LW        V1, AC (S0)
	LW        V0, 8C (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o64
	SW        V1, AC (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o74
	ADDU      V0, V1, V0
	.o64
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o78
	SUBU      V0, V1, A0
	.o74
	SW        V0, AC (S0)
	.o78
	LW        V1, B0 (S0)
	LW        V0, 90 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o98
	SW        V1, B0 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oA8
	ADDU      V0, V1, V0
	.o98
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oAC
	SUBU      V0, V1, A0
	.oA8
	SW        V0, B0 (S0)
	.oAC
	LW        V1, B4 (S0)
	LW        V0, 94 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .oCC
	SW        V1, B4 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oDC
	ADDU      V0, V1, V0
	.oCC
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oE0
	SUBU      V0, V1, A0
	.oDC
	SW        V0, B4 (S0)
	.oE0
	LW        A0, 84 (S0)
	JAL       8011BC1C
	LW        A1, A8 (S0)
	LW        A0, 84 (S0)
	JAL       8011BC34
	LW        A1, AC (S0)
	LW        A0, 84 (S0)
	JAL       8011BC4C
	LW        A1, B0 (S0)
	LW        A0, 84 (S0)
	JAL       8011BC64
	LW        A1, B4 (S0)
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	DADDU     V0, R0, R0
	JR        RA
	ADDIU     SP, SP, 18

#new:Function $Function_80219664
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	DADDU     S0, A0, R0
	BEQ       A1, R0, .o24
	SW        RA, 14 (SP)
	SW        R0, 70 (S0)
	SW        R0, 74 (S0)
	SW        R0, 78 (S0)
	SW        R0, 7C (S0)
	.o24
	LW        V0, 70 (S0)
	BNE       V0, R0, .o64
	NOP
	LW        V1, A8 (S0)
	LW        V0, 88 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o50
	SW        V1, A8 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o60
	ADDU      V0, V1, V0
	.o50
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o64
	SUBU      V0, V1, A0
	.o60
	SW        V0, A8 (S0)
	.o64
	LW        V0, 74 (S0)
	BNE       V0, R0, .oA4
	NOP
	LW        V1, AC (S0)
	LW        V0, 8C (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o90
	SW        V1, AC (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oA0
	ADDU      V0, V1, V0
	.o90
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oA4
	SUBU      V0, V1, A0
	.oA0
	SW        V0, AC (S0)
	.oA4
	LW        V0, 78 (S0)
	BNE       V0, R0, .oE4
	NOP
	LW        V1, B0 (S0)
	LW        V0, 90 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .oD0
	SW        V1, B0 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .oE0
	ADDU      V0, V1, V0
	.oD0
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .oE4
	SUBU      V0, V1, A0
	.oE0
	SW        V0, B0 (S0)
	.oE4
	LW        V0, 7C (S0)
	BNE       V0, R0, .o124
	NOP
	LW        V1, B4 (S0)
	LW        V0, 94 (S0)
	ADDU      V1, V1, V0
	BGEZ      V1, .o110
	SW        V1, B4 (S0)
	LUI       V0, 2
	BEQ       R0, R0, .o120
	ADDU      V0, V1, V0
	.o110
	LUI       A0, 2
	SLT       V0, A0, V1
	BEQ       V0, R0, .o124
	SUBU      V0, V1, A0
	.o120
	SW        V0, B4 (S0)
	.o124
	LW        A0, 84 (S0)
	JAL       8011BC1C
	LW        A1, A8 (S0)
	LW        A0, 84 (S0)
	JAL       8011BC34
	LW        A1, AC (S0)
	LW        A0, 84 (S0)
	JAL       8011BC4C
	LW        A1, B0 (S0)
	LW        A0, 84 (S0)
	JAL       8011BC64
	LW        A1, B4 (S0)
	LW        V0, 70 (S0)
	LW        V1, 78 (S0)
	LW        A0, 98 (S0)
	ADDIU     V0, V0, 1
	SW        V0, 70 (S0)
	LW        V0, 74 (S0)
	ADDIU     V1, V1, 1
	SW        V1, 78 (S0)
	LW        V1, 70 (S0)
	ADDIU     V0, V0, 1
	SW        V0, 74 (S0)
	LW        V0, 7C (S0)
	SLT       V1, V1, A0
	ADDIU     V0, V0, 1
	BNE       V1, R0, .o198
	SW        V0, 7C (S0)
	SW        R0, 70 (S0)
	.o198
	LW        V0, 74 (S0)
	LW        V1, 9C (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1AC
	SW        R0, 74 (S0)
	.o1AC
	LW        V0, 78 (S0)
	LW        V1, A0 (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1C0
	SW        R0, 78 (S0)
	.o1C0
	LW        V0, 7C (S0)
	LW        V1, A4 (S0)
	SLT       V0, V0, V1
	BEQL      V0, R0, .o1D4
	SW        R0, 7C (S0)
	.o1D4
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	DADDU     V0, R0, R0
	JR        RA
	ADDIU     SP, SP, 18

PADDING: 8021984C to 80219850 (00619F3C to 00619F40)
00000000 

#new:DefenseTable $DefenseTable_80219850
.Element:Normal 00000000
.Element:End

#new:StatusTable $StatusTable_8021985C
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      80`
.Status:Poison     60`
.Status:Frozen      0`
.Status:Dizzy     100`
.Status:Fear        0`
.Status:Static     80`
.Status:Paralyze   90`
.Status:Shrink     90`
.Status:Stop       90`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End

#new:SpriteTable $SpriteTable_80219908
00800000 01000000 001D00FF $IdleAnimations_80219954 $DefenseTable_80219850 00000000 00000000 010F0000 00000000 

#new:Actor $Swooper
% stats
[Index]        16b 
[Level]        10`b 
[MaxHP]         4`b 
[Coins]         1`b 
[Flags]       00000800 
[StatusTable] $StatusTable_8021985C 
% ai
[SpriteCount]   1`s 
[SpriteTable] $SpriteTable_80219908 
[Script]      $Script_Init_802199EC 
% move effectiveness
[Escape]       50`b 
[Item]         90`b 
[AirLift]     100`b 
[Hurricane]    95`b % Bow's "Spook" as well
[UpAndAway]    95`b 
[PowerBounce]  80`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         31`b  24`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b -20`b % dx dy
[StatusIcon]   10`b -20`b % dx dy

#new:IdleAnimations $IdleAnimations_80219954
.Status:Normal    0034000C
.Status:Stone     0034000B
.Status:Sleep     0034000F
.Status:Poison    0034000C
.Status:Stop      0034000B
.Status:Static    0034000C
.Status:Paralyze  0034000B
.Status:Dizzy     00340010
.Status:Fear      00340010
.Status:End

#new:IdleAnimations $IdleAnimations_802199A0
.Status:Normal    00340002
.Status:Stone     00340001
.Status:Sleep     00340013
.Status:Poison    00340002
.Status:Stop      00340001
.Status:Static    00340002
.Status:Paralyze  00340001
.Status:Dizzy     00340014
.Status:Fear      00340014
.Status:End

#new:Script $Script_Init_802199EC
	Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_8021B274 )
	Call     BindIdle    	( .Actor:Self $Script_Idle_80219A50 )
	Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8021A404 )
	Call     SetActorVar 	( .Actor:Self 00000008 00000000 )
	Return
	End

#new:Script $Script_Idle_80219A50
	Return
	End

#new:Script $Script_80219A60
	Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
	Switch  *Var[0] 
	   Case  ==  00000000 
	      Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	      Call     SetGoalToHome 	( .Actor:Self )
	      Call     AddToGoalPos 	( .Actor:Self 00000000 FFFFFFE8 00000000 )
	      Call     MoveToGoal  	( .Actor:Self 00000000 00000001 .Easing:SinOut )
	      Call     SetActorFlagBits 	( .Actor:Self 00000800 .True )
	      Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_80219954 )
	      Call     SetAnimation 	( .Actor:Self 00000001 0034000C )
	      Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Add  *Var[1]  00000018 
	      Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     HPBarToHome 	( .Actor:Self )
	   Case  ==  00000001 
	      Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	      Call     SetGoalToHome 	( .Actor:Self )
	      Call     MoveToGoal  	( .Actor:Self 00000000 00000001 .Easing:SinOut )
	EndSwitch
	Return
	End

#new:Script $Script_80219C20
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     GetEventType 	( .Actor:Self *Var[0] )
	Switch  *Var[0] 
	   CaseOR  ==  .Event:HitCombo
	   CaseOR  ==  .Event:Hit
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait DoNormalHit 
	   EndCaseGroup
	   Case  ==  .Event:BurnHit
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340017 
	      SetConst  *Var[2]  00340018 
	      ExecWait DoBurnHit 
	   Case  ==  .Event:BurnDeath
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340017 
	      SetConst  *Var[2]  00340018 
	      ExecWait DoBurnHit 
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340018 
	      ExecWait DoDeath 
	      Return
	   Case  ==  .Event:ShockHit
	      Call     80269470 ( )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait DoShockHit 
	      Call     UseCamPreset 	( 00000002 )
	      ExecWait $Script_80219A60 
	   Case  ==  .Event:ShockDeath
	      Call     80269470 ( )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait DoShockHit 
	      Thread
	         Wait     0000001E 
	         Call     UseCamPreset 	( 00000002 )
	      EndThread
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait DoDeath 
	      Return
	   CaseOR  ==  00000017
	   CaseOR  ==  .Event:Immune
	   CaseOR  ==  .Event:AirLiftFailed
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340002 
	      ExecWait DoImmune 
	   EndCaseGroup
	   Case  ==  .Event:Death
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait DoNormalHit 
	      Wait     0000000A 
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait DoDeath 
	      Return
	   Case  ==  .Event:RecoverStatus
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340002 
	      ExecWait DoRecover 
	   Case  ==  .Event:ScareAway
	      Call     SetActorFlagBits 	( .Actor:Self 00000200 .False )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340002 
	      SetConst  *Var[2]  00340015 
	      ExecWait DoScareAway 
	      Return
	   Case  ==  .Event:BeginAirLift
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340002 
	      ExecWait DoAirLift 
	   Case  ==  .Event:BlowAway
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait DoBlowAway 
	      Return
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End

#new:Script $Script_8021A0A4
	Call     8027D32C ( FFFFFF81 )
	Call     GetLastDamage 	( .Actor:Self *Var[0] )
	If  *Var[0]  <=  00000000 
	   Return
	EndIf
	Call     SetActorFlagBits 	( .Actor:Self 00000800 .False )
	Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	Call     8026BA04 ( FFFFFF81 00000000 00000000 00000000 )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub  *Var[1]  00000018 
	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     GetActorVar 	( .Actor:Self 00000000 *Var[A] )
	If  *Var[A]  ==  FFFFFFFF 
	   Call     SetHomePos  	( .Actor:Self *Var[0] 0000002D *Var[2] )
	   Call     SetActorJumpscale 	( .Actor:Self *Fixed[0.80078125] )
	   Call     SetGoalToHome 	( .Actor:Self )
	   Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000000 00000000 )
	   Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
	Else
	   Call     SetActorJumpscale 	( .Actor:Self *Fixed[0.80078125] )
	   Call     SetGoalToPos 	( .Actor:Self *Var[0] 0000002D *Var[2] )
	   Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000000 00000000 )
	   Call     GetIndexFromPos 	( .Actor:Self *Var[A] )
	   Mod  *Var[A]  00000004 
	   Add  *Var[A]  00000004 
	   Call     SetGoalToIndex ( .Actor:Self *Var[A] )
	   Call     GetGoalPos  	( .Actor:Self *Var[A] *Var[B] *Var[C] )
	   Call     SetHomePos  	( .Actor:Self *Var[A] *Var[B] *Var[C] )
	   Call     SetActorJumpscale 	( .Actor:Self *Fixed[0.80078125] )
	   Call     SetGoalToHome 	( .Actor:Self )
	   Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
	EndIf
	Call     8027D4C8 ( FFFFFF81 00000001 00000000 FFFFFFF6 )
	Call     SetTargetOffset 	( .Actor:Self 00000001 00000000 00000016 )
	Call     $Function_80218000 ( FFFFFFF6 00000014 0000000A 00000014 )
	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_802199A0 )
	Call     SetActorFlagBits 	( .Actor:Self 00000200 .True )
	Call     HPBarToHome 	( .Actor:Self )
	Call     SetActorVar 	( .Actor:Self 00000008 00000001 )
	Return
	End

#new:Script $Script_HandleEvent_8021A404
	Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
	If  *Var[0]  ==  00000001 
	   ExecWait $Script_80219C20 
	   Return
	EndIf
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     GetEventType 	( .Actor:Self *Var[0] )
	Switch  *Var[0] 
	   Case  ==  .Event:HitCombo
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340015 
	         ExecWait DoNormalHit 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  0034000E 
	         ExecWait DoNormalHit 
	      EndIf
	   Case  ==  .Event:Hit
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340015 
	         ExecWait DoNormalHit 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  0034000E 
	         ExecWait DoNormalHit 
	         ExecWait $Script_8021A0A4 
	      EndIf
	   Case  ==  .Event:BurnHit
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340017 
	         SetConst  *Var[2]  00340018 
	         ExecWait DoBurnHit 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340011 
	         SetConst  *Var[2]  00340012 
	         ExecWait DoBurnHit 
	         ExecWait $Script_8021A0A4 
	      EndIf
	   Case  ==  .Event:BurnDeath
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340017 
	         SetConst  *Var[2]  00340018 
	         ExecWait DoBurnHit 
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340018 
	         ExecWait DoDeath 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340011 
	         SetConst  *Var[2]  00340012 
	         ExecWait DoBurnHit 
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340012 
	         ExecWait DoDeath 
	      EndIf
	      Return
	   Case  ==  .Event:ShockHit
	      Call     80269470 ( )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait 8029A76C 
	      Call     UseCamPreset 	( 00000002 )
	      ExecWait $Script_80219A60 
	   Case  ==  .Event:ShockDeath
	      Call     80269470 ( )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait 8029A76C 
	      Thread
	         Wait     0000001E 
	         Call     UseCamPreset 	( 00000002 )
	      EndThread
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340015 
	      ExecWait DoDeath 
	      Return
	   CaseOR  ==  00000017
	   CaseOR  ==  .Event:Immune
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  0034000C 
	      ExecWait DoImmune 
	   EndCaseGroup
	   Case  ==  .Event:Death
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340015 
	         ExecWait DoNormalHit 
	         Wait     0000000A 
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340015 
	         ExecWait DoDeath 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  0034000E 
	         ExecWait DoNormalHit 
	         Wait     0000000A 
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  0034000E 
	         ExecWait DoDeath 
	      EndIf
	      Return
	   Case  ==  .Event:BeginFirstStrike
	      Call     SetActorFlagBits 	( .Actor:Self 00000800 .False )
	      Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_802199A0 )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	      Call     SetActorPos 	( .Actor:Self 00000014 00000000 00000000 )
	      Call     HPBarToCurrent ( .Actor:Self )
	   Case  ==  .Event:EndFirstStrike
	      ExecWait $Script_80219A60 
	      Call     HPBarToHome 	( .Actor:Self )
	   Case  ==  .Event:RecoverStatus
	   Case  ==  .Event:ScareAway
	      Call     SetActorFlagBits 	( .Actor:Self 00000200 .True )
	      Call     SetActorFlagBits 	( .Actor:Self 00000800 .False )
	      Call     8026BA04 ( FFFFFF81 00000000 FFFFFFE8 00000000 )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340002 
	      SetConst  *Var[2]  00340015 
	      ExecWait DoScareAway 
	      Return
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End

#new:Script $Script_8021AB84
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     SetTargetActor ( .Actor:Self .Actor:Player )
	Call     GetBattlePhase ( *Var[0] )
	If  *Var[0]  ==  .Phase:FirstStrike
	   Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	   Call     SetGoalToTarget 	( .Actor:Self )
	   Call     AddToGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
	   Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	   Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	   Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Else
	   Call     UseCamPreset 	( 0000003F )
	   Call     CamTargetActor ( .Actor:Self )
	   Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
	   Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	   Call     SetGoalToTarget 	( .Actor:Self )
	   Call     AddToGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
	   Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	   Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFFC .Easing:Linear )
	EndIf
	Call     CheckPlayerHit ( .Actor:Self *Var[0] 00000000 00000000 00000002 00000010 )
	Switch  *Var[0] 
	   CaseOR  ==  00000006 
	   CaseOR  ==  00000005 
	      Set  *Var[A]  *Var[0] 
	      Wait     0000000A 
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
	      Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340006 )
	      Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
	      Call     SetGoalToTarget 	( .Actor:Self )
	      Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Sub  *Var[0]  00000032 
	      Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340006 )
	      Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
	      Call     SetAnimationSpeed 	( .Actor:Self 00000001 *Fixed[10.0] )
	      Wait     0000000F 
	      Call     SetAnimationSpeed 	( .Actor:Self 00000001 *Fixed[1.0] )
	      If  *Var[A]  ==  00000005 
	         Call     CheckPlayerHit ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
	      EndIf
	      Call     8027D7F0 ( )
	      Call     UseCamPreset 	( 00000002 )
	      Call     SetActorAngle 	( .Actor:Self 000000B4 )
	      Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
	      ExecWait $Script_80219A60 
	      Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
	      Call     SetActorAngle 	( .Actor:Self 00000000 )
	      Call     EnableIdleScript 	( .Actor:Self 00000001 )
	      Call     UseIdleAnimation 	( .Actor:Self .True )
	      Return
	   EndCaseGroup
	   Case  ==  00000007 
	      Call     GetStatusFlags ( .Actor:Self *Var[0] )
	      If  *Var[0]  &  00002000 
	         Set  *Flag[00]  00000000 
	      Else
	         Set  *Flag[00]  00000001 
	      EndIf
	EndSwitch
	Wait     0000000A 
	Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
	Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340006 )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340006 )
	Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
	Wait     00000002 
	Call     DamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000002 00000020 )
	Call     UseCamPreset 	( 00000002 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     AddToGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
	Wait     0000000A 
	Call     8027D7F0 ( )
	ExecWait $Script_80219A60 
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End

#new:Script $Script_TakeTurn_8021B274
	Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
	If  *Var[0]  ==  00000001 
	   ExecWait $Script_8021AB84 
	   Return
	EndIf
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     SetTargetActor ( .Actor:Self .Actor:Player )
	Call     UseCamPreset 	( 0000003F )
	Call     CamTargetActor ( .Actor:Self )
	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
	Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	Call     SetActorFlagBits 	( .Actor:Self 00000800 .False )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub  *Var[1]  00000018 
	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     CheckPlayerHit ( .Actor:Self *Var[0] 00000000 00000000 00000002 00000010 )
	Switch  *Var[0] 
	   CaseOR  ==  00000006 
	   CaseOR  ==  00000005 
	      Set  *Var[A]  *Var[0] 
	      Wait     0000000A 
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
	      Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340006 )
	      Call     SetGoalToTarget 	( .Actor:Self )
	      Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     AddToGoalPos 	( .Actor:Self FFFFFFCE 00000000 00000000 )
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340006 )
	      Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFD8 .Easing:Linear )
	      Call     SetAnimationSpeed 	( .Actor:Self 00000001 *Fixed[10.0] )
	      Wait     0000000F 
	      Call     SetAnimationSpeed 	( .Actor:Self 00000001 *Fixed[1.0] )
	      If  *Var[A]  ==  00000005 
	         Call     CheckPlayerHit ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
	      EndIf
	      Call     8027D7F0 ( )
	      Call     UseCamPreset 	( 00000002 )
	      Call     SetActorAngle 	( .Actor:Self 000000B4 )
	      Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
	      ExecWait $Script_80219A60 
	      Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
	      Call     SetActorAngle 	( .Actor:Self 00000000 )
	      Call     EnableIdleScript 	( .Actor:Self 00000001 )
	      Call     UseIdleAnimation 	( .Actor:Self .True )
	      Return
	   EndCaseGroup
	   Case  ==  00000007 
	      Call     GetStatusFlags ( .Actor:Self *Var[0] )
	      If  *Var[0]  &  00002000 
	         Set  *Flag[00]  00000000 
	      Else
	         Set  *Flag[00]  00000001 
	      EndIf
	EndSwitch
	Wait     0000000A 
	Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
	Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340006 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340006 )
	Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFD8 .Easing:Linear )
	Wait     00000002 
	Call     DamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000002 00000020 )
	Call     UseCamPreset 	( 00000002 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     AddToGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340002 )
	Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
	Wait     0000000A 
	Call     8027D7F0 ( )
	ExecWait $Script_80219A60 
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End

PADDING: 8021B85C to 8021B860 (0061BF4C to 0061BF50)
00000000 

#new:DefenseTable $DefenseTable_8021B860
.Element:Normal 00000000
.Element:End

#new:StatusTable $StatusTable_8021B86C
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      60`
.Status:Poison     60`
.Status:Frozen      0`
.Status:Dizzy     100`
.Status:Fear        0`
.Status:Static     80`
.Status:Paralyze   80`
.Status:Shrink     75`
.Status:Stop       85`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End

#new:SpriteTable $SpriteTable_8021B918
00800000 01000000 001D00FF $IdleAnimations_8021B964 $DefenseTable_8021B860 00000000 00000000 010F0000 00000000 

#new:Actor $Swoopula
% stats
[Index]        3Ab 
[Level]        22`b 
[MaxHP]         8`b 
[Coins]         1`b 
[Flags]       00000800 
[StatusTable] $StatusTable_8021B86C 
% ai
[SpriteCount]   1`s 
[SpriteTable] $SpriteTable_8021B918 
[Script]      $Script_Init_8021B9FC 
% move effectiveness
[Escape]       30`b 
[Item]         70`b 
[AirLift]      95`b 
[Hurricane]    95`b % Bow's "Spook" as well
[UpAndAway]    95`b 
[PowerBounce]  80`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         31`b  24`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b -20`b % dx dy
[StatusIcon]   10`b -20`b % dx dy

#new:IdleAnimations $IdleAnimations_8021B964
.Status:Normal    0034010C
.Status:Stone     0034010B
.Status:Sleep     0034010F
.Status:Poison    0034010C
.Status:Stop      0034010B
.Status:Static    0034010C
.Status:Paralyze  0034010B
.Status:Dizzy     00340110
.Status:Fear      00340110
.Status:End

#new:IdleAnimations $IdleAnimations_8021B9B0
.Status:Normal    00340102
.Status:Stone     00340101
.Status:Sleep     00340113
.Status:Poison    00340102
.Status:Stop      00340101
.Status:Static    00340102
.Status:Paralyze  00340101
.Status:Dizzy     00340114
.Status:Fear      00340114
.Status:End

#new:Script $Script_Init_8021B9FC
	Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_8021E7B4 )
	Call     BindIdle    	( .Actor:Self $Script_Idle_8021BA60 )
	Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8021C414 )
	Call     SetActorVar 	( .Actor:Self 00000008 00000000 )
	Return
	End

#new:Script $Script_Idle_8021BA60
	Return
	End

#new:Script $Script_8021BA70
	Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
	Switch  *Var[0] 
	   Case  ==  00000000 
	      Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	      Call     SetGoalToHome 	( .Actor:Self )
	      Call     AddToGoalPos 	( .Actor:Self 00000000 FFFFFFE8 00000000 )
	      Call     MoveToGoal  	( .Actor:Self 00000000 00000001 .Easing:SinOut )
	      Call     SetActorFlagBits 	( .Actor:Self 00000800 .True )
	      Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8021B964 )
	      Call     SetAnimation 	( .Actor:Self 00000001 0034010C )
	      Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Add  *Var[1]  00000018 
	      Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     HPBarToHome 	( .Actor:Self )
	   Case  ==  00000001 
	      Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	      Call     SetGoalToHome 	( .Actor:Self )
	      Call     MoveToGoal  	( .Actor:Self 00000000 00000001 .Easing:SinOut )
	EndSwitch
	Return
	End

#new:Script $Script_8021BC30
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     GetEventType 	( .Actor:Self *Var[0] )
	Switch  *Var[0] 
	   CaseOR  ==  .Event:HitCombo
	   CaseOR  ==  .Event:Hit
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait DoNormalHit 
	   EndCaseGroup
	   Case  ==  .Event:BurnHit
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340117 
	      SetConst  *Var[2]  00340118 
	      ExecWait DoBurnHit 
	   Case  ==  .Event:BurnDeath
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340117 
	      SetConst  *Var[2]  00340118 
	      ExecWait DoBurnHit 
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340118 
	      ExecWait DoDeath 
	      Return
	   Case  ==  .Event:ShockHit
	      Call     80269470 ( )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait DoShockHit 
	      Call     UseCamPreset 	( 00000002 )
	      ExecWait $Script_8021BA70 
	   Case  ==  .Event:ShockDeath
	      Call     80269470 ( )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait DoShockHit 
	      Thread
	         Wait     0000001E 
	         Call     UseCamPreset 	( 00000002 )
	      EndThread
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait DoDeath 
	      Return
	   CaseOR  ==  00000017
	   CaseOR  ==  .Event:Immune
	   CaseOR  ==  .Event:AirLiftFailed
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340102 
	      ExecWait DoImmune 
	   EndCaseGroup
	   Case  ==  .Event:Death
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait DoNormalHit 
	      Wait     0000000A 
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait DoDeath 
	      Return
	   Case  ==  .Event:RecoverStatus
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340102 
	      ExecWait DoRecover 
	   Case  ==  .Event:ScareAway
	      Call     SetActorFlagBits 	( .Actor:Self 00000200 .False )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340102 
	      SetConst  *Var[2]  00340115 
	      ExecWait DoScareAway 
	      Return
	   Case  ==  .Event:BeginAirLift
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340102 
	      ExecWait DoAirLift 
	   Case  ==  .Event:BlowAway
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait DoBlowAway 
	      Return
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End

#new:Script $Script_8021C0B4
	Call     8027D32C ( FFFFFF81 )
	Call     GetLastDamage 	( .Actor:Self *Var[0] )
	If  *Var[0]  <=  00000000 
	   Return
	EndIf
	Call     SetActorFlagBits 	( .Actor:Self 00000800 .False )
	Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	Call     8026BA04 ( FFFFFF81 00000000 00000000 00000000 )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub  *Var[1]  00000018 
	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     GetActorVar 	( .Actor:Self 00000000 *Var[A] )
	If  *Var[A]  ==  FFFFFFFF 
	   Call     SetHomePos  	( .Actor:Self *Var[0] 0000002D *Var[2] )
	   Call     SetActorJumpscale 	( .Actor:Self *Fixed[0.80078125] )
	   Call     SetGoalToHome 	( .Actor:Self )
	   Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000000 00000000 )
	   Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
	Else
	   Call     SetActorJumpscale 	( .Actor:Self *Fixed[0.80078125] )
	   Call     SetGoalToPos 	( .Actor:Self *Var[0] 0000002D *Var[2] )
	   Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000000 00000000 )
	   Call     GetIndexFromPos 	( .Actor:Self *Var[A] )
	   Mod  *Var[A]  00000004 
	   Add  *Var[A]  00000004 
	   Call     SetGoalToIndex ( .Actor:Self *Var[A] )
	   Call     GetGoalPos  	( .Actor:Self *Var[A] *Var[B] *Var[C] )
	   Call     SetHomePos  	( .Actor:Self *Var[A] *Var[B] *Var[C] )
	   Call     SetActorJumpscale 	( .Actor:Self *Fixed[0.80078125] )
	   Call     SetGoalToHome 	( .Actor:Self )
	   Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
	EndIf
	Call     8027D4C8 ( FFFFFF81 00000001 00000000 FFFFFFF6 )
	Call     SetTargetOffset 	( .Actor:Self 00000001 00000000 00000016 )
	Call     $Function_802180D0 ( FFFFFFF6 00000014 0000000A 00000014 )
	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8021B9B0 )
	Call     SetActorFlagBits 	( .Actor:Self 00000200 .True )
	Call     HPBarToHome 	( .Actor:Self )
	Call     SetActorVar 	( .Actor:Self 00000008 00000001 )
	Return
	End

#new:Script $Script_HandleEvent_8021C414
	Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
	If  *Var[0]  ==  00000001 
	   ExecWait $Script_8021BC30 
	   Return
	EndIf
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     GetEventType 	( .Actor:Self *Var[0] )
	Switch  *Var[0] 
	   Case  ==  .Event:HitCombo
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340115 
	         ExecWait DoNormalHit 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  0034010E 
	         ExecWait DoNormalHit 
	      EndIf
	   Case  ==  .Event:Hit
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340115 
	         ExecWait DoNormalHit 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  0034010E 
	         ExecWait DoNormalHit 
	         ExecWait $Script_8021C0B4 
	      EndIf
	   Case  ==  .Event:BurnHit
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340117 
	         SetConst  *Var[2]  00340118 
	         ExecWait DoBurnHit 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340111 
	         SetConst  *Var[2]  00340112 
	         ExecWait DoBurnHit 
	         ExecWait $Script_8021C0B4 
	      EndIf
	   Case  ==  .Event:BurnDeath
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340117 
	         SetConst  *Var[2]  00340118 
	         ExecWait DoBurnHit 
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340118 
	         ExecWait DoDeath 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340111 
	         SetConst  *Var[2]  00340112 
	         ExecWait DoBurnHit 
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340112 
	         ExecWait DoDeath 
	      EndIf
	      Return
	   Case  ==  .Event:ShockHit
	      Call     80269470 ( )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait 8029A76C 
	      Call     UseCamPreset 	( 00000002 )
	      ExecWait $Script_8021BA70 
	   Case  ==  .Event:ShockDeath
	      Call     80269470 ( )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait 8029A76C 
	      Thread
	         Wait     0000001E 
	         Call     UseCamPreset 	( 00000002 )
	      EndThread
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340115 
	      ExecWait DoDeath 
	      Return
	   CaseOR  ==  00000017
	   CaseOR  ==  .Event:Immune
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  0034010C 
	      ExecWait DoImmune 
	   EndCaseGroup
	   Case  ==  .Event:Death
	      Call     GetBattlePhase ( *Var[0] )
	      If  *Var[0]  ==  .Phase:FirstStrike
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340115 
	         ExecWait DoNormalHit 
	         Wait     0000000A 
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  00340115 
	         ExecWait DoDeath 
	      Else
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  0034010E 
	         ExecWait DoNormalHit 
	         Wait     0000000A 
	         SetConst  *Var[0]  00000001 
	         SetConst  *Var[1]  0034010E 
	         ExecWait DoDeath 
	      EndIf
	      Return
	   Case  ==  .Event:BeginFirstStrike
	      Call     SetActorFlagBits 	( .Actor:Self 00000800 .False )
	      Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8021B9B0 )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	      Call     SetActorPos 	( .Actor:Self 00000014 00000000 00000000 )
	      Call     HPBarToCurrent ( .Actor:Self )
	   Case  ==  .Event:EndFirstStrike
	      ExecWait $Script_8021BA70 
	      Call     HPBarToHome 	( .Actor:Self )
	   Case  ==  .Event:RecoverStatus
	   Case  ==  .Event:ScareAway
	      Call     SetActorFlagBits 	( .Actor:Self 00000200 .True )
	      Call     SetActorFlagBits 	( .Actor:Self 00000800 .False )
	      Call     8026BA04 ( FFFFFF81 00000000 FFFFFFE8 00000000 )
	      SetConst  *Var[0]  00000001 
	      SetConst  *Var[1]  00340102 
	      SetConst  *Var[2]  00340115 
	      ExecWait DoScareAway 
	      Return
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End

#new:Script $Script_8021CB94
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     SetTargetActor ( .Actor:Self .Actor:Player )
	Call     GetBattlePhase ( *Var[0] )
	If  *Var[0]  ==  .Phase:FirstStrike
	   Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	   Call     SetGoalToTarget 	( .Actor:Self )
	   Call     AddToGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
	   Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	   Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	   Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Else
	   Call     UseCamPreset 	( 0000003F )
	   Call     CamTargetActor ( .Actor:Self )
	   Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
	   Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	   Call     SetGoalToTarget 	( .Actor:Self )
	   Call     AddToGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
	   Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	   Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFFC .Easing:Linear )
	EndIf
	Call     CheckPlayerHit ( .Actor:Self *Var[0] 08000000 00000000 00000002 00000010 )
	Switch  *Var[0] 
	   CaseOR  ==  00000006 
	   CaseOR  ==  00000005 
	      Set  *Var[A]  *Var[0] 
	      Wait     0000000A 
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
	      Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340106 )
	      Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
	      Call     SetGoalToTarget 	( .Actor:Self )
	      Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Sub  *Var[0]  00000032 
	      Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340106 )
	      Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
	      Call     SetAnimationSpeed 	( .Actor:Self 00000001 *Fixed[10.0] )
	      Wait     0000000F 
	      Call     SetAnimationSpeed 	( .Actor:Self 00000001 *Fixed[1.0] )
	      If  *Var[A]  ==  00000005 
	         Call     CheckPlayerHit ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
	      EndIf
	      Call     8027D7F0 ( )
	      Call     UseCamPreset 	( 00000002 )
	      Call     SetActorAngle 	( .Actor:Self 000000B4 )
	      Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
	      ExecWait $Script_8021BA70 
	      Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
	      Call     SetActorAngle 	( .Actor:Self 00000000 )
	      Call     EnableIdleScript 	( .Actor:Self 00000001 )
	      Call     UseIdleAnimation 	( .Actor:Self .True )
	      Return
	   EndCaseGroup
	   Case  ==  00000007 
	      Call     GetStatusFlags ( .Actor:Self *Var[0] )
	      If  *Var[0]  &  00002000 
	         Set  *Flag[00]  00000000 
	      Else
	         Set  *Flag[00]  00000001 
	      EndIf
	EndSwitch
	Wait     0000000A 
	Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
	Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340106 )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     SetGoalToPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000000 00000000 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     AddToGoalPos 	( .Actor:Self FFFFFFFC FFFFFFF8 FFFFFFF1 )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340106 )
	Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
	If  *Flag[00]  ==  00000001 
	   Call     DamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000000 00000020 )
	   Return
	EndIf
	Call     GetStatusFlags ( .Actor:Player *Var[0] )
	If  *Var[0]  &  00100000 
	   Wait     0000000A 
	   Loop     00000002 
	      Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	      Wait     00000015 
	      Loop     00000002 
	         Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
	         Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	         Wait     00000001 
	      EndLoop
	      Wait     00000005 
	      Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	      Wait     00000001 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	      Wait     00000001 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	      Wait     00000001 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	      Wait     00000001 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
	      Wait     00000002 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.60058594] *Fixed[1.6005859] *Fixed[1.0] )
	      Wait     0000000A 
	      Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	      Wait     00000002 
	      Call     DamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000002 00000040 )
	      Wait     0000001E 
	   EndLoop
	Else
	   Call     ShowMessageBox ( 00000031 00007FFF )
	   Call     802694A4 ( 00000001 )
	   Call     LoadActionCommand 	( 00000006 )
	   Call     802A9000 ( )
	   Call     802691C8 ( 00000001 0000001E 00000000 00000000 00000000 00000000 )
	   Wait     0000000A 
	   Call     SetBattleFlagBits 	( 00004000 .False )
	   Call     802A9110 ( 00000000 00007FFF 00000003 )
	   Set  *Var[D]  00000000 
	   Loop     00000005 
	      Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	      Set  *Flag[00]  00000000 
	      Loop     00000015 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     UseIdleAnimation 	( .Actor:Player .False )
	      Call     SetAnimation 	( .Actor:Player 00000000 0003000C )
	      Loop     00000002 
	         Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
	         Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	         Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	         Set  *Flag[00]  00000000 
	         Loop     00000001 
	            Call     802694F8 ( *Var[1] )
	            If  *Var[1]  ==  00000001 
	               Set  *Flag[00]  00000001 
	               BreakLoop
	            EndIf
	            Wait     00000001 
	         EndLoop
	         If  *Flag[00]  ==  00000001 
	            Call     UseIdleAnimation 	( .Actor:Player .True )
	            BreakLoop
	         EndIf
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         BreakLoop
	      EndIf
	      Set  *Flag[00]  00000000 
	      Loop     00000005 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
	      Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000001 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000001 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000001 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000001 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000002 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.60058594] *Fixed[1.6005859] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     0000000A 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000002 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     UseIdleAnimation 	( .Actor:Player .True )
	      Call     DamageTarget 	( .Actor:Self *Var[0] 0A000000 00000000 00000000 00000002 00000040 )
	      Call     GetLastDamage 	( .Actor:Player *Var[3] )
	      If  *Var[3]  !=  00000000 
	         Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
	         Call     PlaySoundAtActor 	( .Actor:Self 00000214 )
	         Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	         Add  *Var[1]  0000000F 
	         Call     $Function_8021819C ( *Var[0] *Var[1] *Var[2] *Var[3] )
	         Thread
	            Wait     0000000F 
	            Call     PlaySoundAtActor 	( .Actor:Self 0000025C )
	            Call     $Function_80218250 ( *Var[0] *Var[1] *Var[2] *Var[3] )
	         EndThread
	         Add  *Var[0]  00000014 
	         Add  *Var[1]  00000014 
	         Call     PlayEffect  	( {FX:Recover:HP} *Var[0] *Var[1] *Var[2] *Var[3] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	         Call     GetActorHP  	( .Actor:Self *Var[0] )
	         Add  *Var[0]  *Var[3] 
	         Call     SetEnemyHP  	( .Actor:Self *Var[0] )
	      Else
	         Add  *Var[D]  00000001 
	         If  *Var[D]  >  00000001 
	            Call     80269470 ( )
	            BreakLoop
	         EndIf
	      EndIf
	      Call     GetPlayerHP 	( *Var[1] )
	      If  *Var[1]  ==  00000000 
	         Call     80269470 ( )
	         BreakLoop
	      EndIf
	      Set  *Flag[00]  00000000 
	      Loop     0000001E 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         BreakLoop
	      EndIf
	   EndLoop
	   Call     80269470 ( )
	   Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	EndIf
	Call     UseCamPreset 	( 00000002 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     AddToGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
	Wait     0000000A 
	Call     8027D7F0 ( )
	ExecWait $Script_8021BA70 
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End

#new:Script $Script_TakeTurn_8021E7B4
	Call     GetActorVar 	( .Actor:Self 00000008 *Var[0] )
	If  *Var[0]  ==  00000001 
	   ExecWait $Script_8021CB94 
	   Return
	EndIf
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self 00000000 )
	Call     SetTargetActor ( .Actor:Self .Actor:Player )
	Call     UseCamPreset 	( 0000003F )
	Call     CamTargetActor ( .Actor:Self )
	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
	Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	Call     SetActorFlagBits 	( .Actor:Self 00000800 .False )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub  *Var[1]  00000018 
	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     CheckPlayerHit ( .Actor:Self *Var[0] 08000000 00000000 00000002 00000010 )
	Switch  *Var[0] 
	   CaseOR  ==  00000006 
	   CaseOR  ==  00000005 
	      Set  *Var[A]  *Var[0] 
	      Wait     0000000A 
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
	      Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340106 )
	      Call     SetGoalToTarget 	( .Actor:Self )
	      Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	      Call     AddToGoalPos 	( .Actor:Self FFFFFFCE 00000000 00000000 )
	      Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	      Call     SetAnimation 	( .Actor:Self 00000001 00340106 )
	      Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFD8 .Easing:Linear )
	      Call     SetAnimationSpeed 	( .Actor:Self 00000001 *Fixed[10.0] )
	      Wait     0000000F 
	      Call     SetAnimationSpeed 	( .Actor:Self 00000001 *Fixed[1.0] )
	      If  *Var[A]  ==  00000005 
	         Call     CheckPlayerHit ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
	      EndIf
	      Call     8027D7F0 ( )
	      Call     UseCamPreset 	( 00000002 )
	      Call     SetActorAngle 	( .Actor:Self 000000B4 )
	      Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
	      ExecWait $Script_8021BA70 
	      Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
	      Call     SetActorAngle 	( .Actor:Self 00000000 )
	      Call     EnableIdleScript 	( .Actor:Self 00000001 )
	      Call     UseIdleAnimation 	( .Actor:Self .True )
	      Return
	   EndCaseGroup
	   Case  ==  00000007 
	      Call     GetStatusFlags ( .Actor:Self *Var[0] )
	      If  *Var[0]  &  00002000 
	         Set  *Flag[00]  00000000 
	      Else
	         Set  *Flag[00]  00000001 
	      EndIf
	EndSwitch
	Wait     0000000A 
	Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
	Call     SetActorJumpscale 	( .Actor:Self *Fixed[1.8007812] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340106 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     AddToGoalPos 	( .Actor:Self FFFFFFFC FFFFFFF8 FFFFFFF1 )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340106 )
	Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFD8 .Easing:Linear )
	If  *Flag[00]  ==  00000001 
	   Call     DamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000000 00000020 )
	   Return
	EndIf
	Call     GetStatusFlags ( .Actor:Player *Var[0] )
	If  *Var[0]  &  00100000 
	   Wait     0000000A 
	   Loop     00000002 
	      Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	      Wait     00000015 
	      Loop     00000002 
	         Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
	         Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	         Wait     00000001 
	         Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	         Wait     00000001 
	      EndLoop
	      Wait     00000005 
	      Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
	      Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	      Wait     00000001 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	      Wait     00000001 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	      Wait     00000001 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	      Wait     00000001 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
	      Wait     00000002 
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.60058594] *Fixed[1.6005859] *Fixed[1.0] )
	      Wait     0000000A 
	      Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	      Wait     00000002 
	      Call     DamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000002 00000040 )
	      Wait     0000001E 
	   EndLoop
	Else
	   Call     ShowMessageBox ( 00000031 00007FFF )
	   Call     802694A4 ( 00000001 )
	   Call     LoadActionCommand 	( 00000006 )
	   Call     802A9000 ( )
	   Call     802691C8 ( 00000001 0000001E 00000000 00000000 00000000 00000000 )
	   Wait     0000000A 
	   Call     SetBattleFlagBits 	( 00004000 .False )
	   Call     802A9110 ( 00000000 00007FFF 00000003 )
	   Set  *Var[D]  00000000 
	   Loop     00000005 
	      Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	      Set  *Flag[00]  00000000 
	      Loop     00000015 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetAnimation 	( .Actor:Player 00000000 0003000C )
	      Call     UseIdleAnimation 	( .Actor:Player .False )
	      Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
	      Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000001 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000001 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000001 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000001 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000002 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[0.60058594] *Fixed[1.6005859] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     0000000A 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	      Set  *Flag[00]  00000000 
	      Loop     00000002 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         Call     UseIdleAnimation 	( .Actor:Player .True )
	         BreakLoop
	      EndIf
	      Call     UseIdleAnimation 	( .Actor:Player .True )
	      Call     DamageTarget 	( .Actor:Self *Var[0] 0A000000 00000000 00000000 00000002 00000040 )
	      Call     GetLastDamage 	( .Actor:Player *Var[3] )
	      If  *Var[3]  !=  00000000 
	         Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
	         Call     PlaySoundAtActor 	( .Actor:Self 00000214 )
	         Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	         Add  *Var[1]  0000000F 
	         Call     $Function_8021819C ( *Var[0] *Var[1] *Var[2] *Var[3] )
	         Thread
	            Wait     0000000F 
	            Call     PlaySoundAtActor 	( .Actor:Self 0000025C )
	            Call     $Function_80218250 ( *Var[0] *Var[1] *Var[2] *Var[3] )
	         EndThread
	         Add  *Var[0]  00000014 
	         Add  *Var[1]  00000014 
	         Call     PlayEffect  	( {FX:Recover:HP} *Var[0] *Var[1] *Var[2] *Var[3] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	         Call     GetActorHP  	( .Actor:Self *Var[0] )
	         Add  *Var[0]  *Var[3] 
	         Call     SetEnemyHP  	( .Actor:Self *Var[0] )
	      Else
	         Add  *Var[D]  00000001 
	         If  *Var[D]  >  00000001 
	            Call     80269470 ( )
	            BreakLoop
	         EndIf
	      EndIf
	      Call     GetPlayerHP 	( *Var[1] )
	      If  *Var[1]  ==  00000000 
	         Call     80269470 ( )
	         BreakLoop
	      EndIf
	      Set  *Flag[00]  00000000 
	      Loop     00000023 
	         Call     802694F8 ( *Var[1] )
	         If  *Var[1]  ==  00000001 
	            Set  *Flag[00]  00000001 
	            BreakLoop
	         EndIf
	         Wait     00000001 
	      EndLoop
	      If  *Flag[00]  ==  00000001 
	         BreakLoop
	      EndIf
	   EndLoop
	   Call     80269470 ( )
	   Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
	EndIf
	Call     UseCamPreset 	( 00000002 )
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     AddToGoalPos 	( .Actor:Self 00000032 0000000A 00000000 )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
	Call     SetAnimation 	( .Actor:Self 00000001 00340102 )
	Call     MoveToGoal  	( .Actor:Self 00000000 FFFFFFF6 .Easing:Linear )
	Wait     0000000A 
	Call     8027D7F0 ( )
	ExecWait $Script_8021BA70 
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	Call     EnableIdleScript 	( .Actor:Self 00000001 )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End

PADDING: 8021FB34 to 8021FB40 (00620224 to 00620230)
00000000 00000000 00000000 

#new:Script $Script_8021FB40
	Set  *Var[A]  *Var[1] 
	Set  *Var[B]  *Var[2] 
	Set  *Var[C]  *Var[3] 
	Call     SetTexPanner 	( *Var[0] *Var[1] )
	Set  *Var[0]  00000000 
	Set  *Var[1]  00000000 
	Loop     
	   Call     802C9364 ( *Var[A] 00000000 *Var[0] *Var[1] )
	   Add  *Var[0]  *Var[B] 
	   Add  *Var[1]  *Var[C] 
	   Wait     00000001 
	EndLoop
	Return
	End

% Origin: HEURISTIC
#new:Script $Script_8021FC10
	Set  *Var[A]  *Var[1] 
	Set  *Var[B]  *Var[2] 
	Set  *Var[C]  *Var[3] 
	Call     SetTexPanner 	( *Var[0] *Var[1] )
	Set  *Var[0]  00000000 
	Set  *Var[1]  00000000 
	Loop     
	   Call     802C9364 ( *Var[A] 00000000 *Var[0] 00000000 )
	   Call     802C9364 ( *Var[A] 00000001 *Var[1] 00000000 )
	   Add  *Var[0]  *Var[B] 
	   Add  *Var[1]  *Var[C] 
	   Wait     00000001 
	EndLoop
	Return
	End

% Origin: HEURISTIC
#new:Script $Script_8021FCFC
	Set  *Var[A]  *Var[1] 
	Set  *Var[B]  *Var[2] 
	Set  *Var[C]  *Var[3] 
	Call     SetTexPanner 	( *Var[0] *Var[1] )
	Set  *Var[0]  00000000 
	Set  *Var[1]  00000000 
	Loop     
	   Call     802C9364 ( *Var[A] 00000000 00000000 *Var[0] )
	   Call     802C9364 ( *Var[A] 00000001 00000000 *Var[1] )
	   Add  *Var[0]  *Var[B] 
	   Add  *Var[1]  *Var[C] 
	   Wait     00000001 
	EndLoop
	Return
	End

#new:Script $Script_8021FDE8
	Set  *Var[1]  *Array[5] 
	Add  *Var[1]  00000001 
	Set  *Var[2]  *Array[0] 
	Set  *Var[3]  *Array[1] 
	Set  *Var[4]  *Array[5] 
	Add  *Var[4]  00000002 
	Set  *Var[5]  *Array[0] 
	Set  *Var[6]  *Array[1] 
	Set  *Var[7]  *Array[5] 
	Add  *Var[7]  00000003 
	Set  *Var[8]  *Array[0] 
	Set  *Var[9]  *Array[1] 
	Set  *Var[A]  *Array[5] 
	Add  *Var[A]  00000004 
	Set  *Var[B]  *Array[0] 
	Set  *Var[C]  *Array[1] 
	Call     EnableModel 	( *Var[1] .True )
	Call     EnableModel 	( *Var[4] .True )
	Call     EnableModel 	( *Var[7] .True )
	Call     EnableModel 	( *Var[A] .True )
	Loop     00000005 
	   Add  *Var[0]  00000001 
	   Add  *Var[2]  00000001 
	   Add  *Var[3]  00000001 
	   Call     TranslateModel ( *Var[1] *Var[2] *Var[0] *Var[3] )
	   Call     ScaleModel  	( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[5]  FFFFFFFF 
	   Add  *Var[6]  00000001 
	   Call     TranslateModel ( *Var[4] *Var[5] *Var[0] *Var[6] )
	   Call     ScaleModel  	( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[8]  00000001 
	   Add  *Var[9]  FFFFFFFF 
	   Call     TranslateModel ( *Var[7] *Var[8] *Var[0] *Var[9] )
	   Call     ScaleModel  	( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[B]  FFFFFFFF 
	   Add  *Var[C]  FFFFFFFF 
	   Call     TranslateModel ( *Var[A] *Var[B] *Var[0] *Var[C] )
	   Call     ScaleModel  	( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Wait     00000001 
	EndLoop
	Loop     00000005 
	   Add  *Var[0]  FFFFFFFF 
	   Add  *Var[2]  00000001 
	   Add  *Var[3]  00000001 
	   Call     TranslateModel ( *Var[1] *Var[2] *Var[0] *Var[3] )
	   Call     ScaleModel  	( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[5]  FFFFFFFF 
	   Add  *Var[6]  00000001 
	   Call     TranslateModel ( *Var[4] *Var[5] *Var[0] *Var[6] )
	   Call     ScaleModel  	( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[8]  00000001 
	   Add  *Var[9]  FFFFFFFF 
	   Call     TranslateModel ( *Var[7] *Var[8] *Var[0] *Var[9] )
	   Call     ScaleModel  	( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[B]  FFFFFFFF 
	   Add  *Var[C]  FFFFFFFF 
	   Call     TranslateModel ( *Var[A] *Var[B] *Var[0] *Var[C] )
	   Call     ScaleModel  	( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Wait     00000001 
	EndLoop
	Call     EnableModel 	( *Var[1] .False )
	Call     EnableModel 	( *Var[4] .False )
	Call     EnableModel 	( *Var[7] .False )
	Call     EnableModel 	( *Var[A] .False )
	Return
	End

#new:Script $Script_802202B8
	SetGroup 00000000 
	UseArray *Var[A] 
	Set  *Var[5]  *Array[5] 
	Loop     00000005 
	   Call     CloneModel  	( 00000010 *Var[5] )
	   Call     TranslateModel ( *Var[5] *Array[0] *Array[2] *Array[1] )
	   Add  *Var[5]  00000001 
	EndLoop
	Label    00000000 
	Call     RandInt     	( 000000C8 *Var[0] )
	Add  *Var[0]  00000032 
	Wait     *Var[0] 
	Call     EnableModel 	( *Array[5] .True )
	Call     MakeLerp    	( *Array[2] *Array[3] *Array[4] 00000001 )
	Label    00000001 
	Call     UpdateLerp  	( )
	Call     TranslateModel ( *Array[5] *Array[0] *Var[0] *Array[1] )
	Wait     00000001 
	Call     $Function_80218310 ( *Array[5] )
	If  *Var[2]  ==  00000001 
	   Goto     0000000A 
	EndIf
	If  *Var[1]  ==  00000001 
	   Goto     00000001 
	EndIf
	Label    0000000A 
	Call     EnableModel 	( *Array[5] .False )
	ExecWait $Script_8021FDE8 
	Goto     00000000 
	Return
	End

#new:Script $Script_80220480
	Set  *Var[F]  00002710 
	UseIntBuffer *Var[0] 
	Get1Int  *Var[1] 
	Loop     *Var[1] 
	   Get4Int  *Var[2] *Var[3] *Var[4] *Var[5] 
	   Get3Int  *Var[6] *Var[7] *Var[8] 
	   Get1Int  *Var[9] 
	   Loop     *Var[9] 
	      NewArray 00000006 *Var[A] 
	      UseArray *Var[A] 
	      Call     RandInt     	( *Var[4] *Var[B] )
	      Call     RandInt     	( *Var[5] *Var[C] )
	      Set  *Var[D]  *Var[2] 
	      Set  *Var[E]  *Var[3] 
	      Add  *Var[D]  *Var[B] 
	      Add  *Var[E]  *Var[C] 
	      Set  *Array[0]  *Var[D] 
	      Set  *Array[1]  *Var[E] 
	      Set  *Array[2]  *Var[6] 
	      Set  *Array[3]  *Var[7] 
	      Set  *Array[4]  *Var[8] 
	      Set  *Array[5]  *Var[F] 
	      ChildThread
	         Exec     $Script_802202B8 
	      EndChildThread
	      Add  *Var[F]  00000005 
	   EndLoop
	EndLoop
	Call     EnableModel 	( 00000010 .False )
	Return
	End

#new:Unknown $???_8022063C
00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C 
00000004 

#new:Script $Script_BeforeBattle_80220660
	Call     SetSpriteShading 	( FFFFFFFF )
	Call     SetCamBGColor 	( 00000001 00000000 00000000 00000000 )
	Set  *Var[0]  0000000D 
	Set  *Var[1]  00000000 
	Set  *Var[2]  00000000 
	Set  *Var[3]  FFFFFE0C 
	Exec     $Script_8021FB40 
	Set  *Var[0]  $???_8022063C 
	Exec     $Script_80220480 
	Return
	End

#new:Script $Script_AfterBattle_80220704
	Return
	End

#new:Stage $Stage_80220714
$ASCII_802233A0  % tik_tex
$ASCII_80223390  % tik_bt01_shape
$ASCII_80223380  % tik_bt01_hit
$Script_BeforeBattle_80220660 
$Script_AfterBattle_80220704 
00000000 
00000000 
00000000 
00000000 
00000000 

PADDING: 8022073C to 80220740 (00620E2C to 00620E30)
00000000 

#new:Script $Script_80220740
	Set  *Var[A]  *Var[1] 
	Set  *Var[B]  *Var[2] 
	Set  *Var[C]  *Var[3] 
	Call     SetTexPanner 	( *Var[0] *Var[1] )
	Set  *Var[0]  00000000 
	Set  *Var[1]  00000000 
	Loop     
	   Call     802C9364 ( *Var[A] 00000000 *Var[0] *Var[1] )
	   Add  *Var[0]  *Var[B] 
	   Add  *Var[1]  *Var[C] 
	   Wait     00000001 
	EndLoop
	Return
	End

% Origin: HEURISTIC
#new:Script $Script_80220810
	Set  *Var[A]  *Var[1] 
	Set  *Var[B]  *Var[2] 
	Set  *Var[C]  *Var[3] 
	Call     SetTexPanner 	( *Var[0] *Var[1] )
	Set  *Var[0]  00000000 
	Set  *Var[1]  00000000 
	Loop     
	   Call     802C9364 ( *Var[A] 00000000 *Var[0] 00000000 )
	   Call     802C9364 ( *Var[A] 00000001 *Var[1] 00000000 )
	   Add  *Var[0]  *Var[B] 
	   Add  *Var[1]  *Var[C] 
	   Wait     00000001 
	EndLoop
	Return
	End

% Origin: HEURISTIC
#new:Script $Script_802208FC
	Set  *Var[A]  *Var[1] 
	Set  *Var[B]  *Var[2] 
	Set  *Var[C]  *Var[3] 
	Call     SetTexPanner 	( *Var[0] *Var[1] )
	Set  *Var[0]  00000000 
	Set  *Var[1]  00000000 
	Loop     
	   Call     802C9364 ( *Var[A] 00000000 00000000 *Var[0] )
	   Call     802C9364 ( *Var[A] 00000001 00000000 *Var[1] )
	   Add  *Var[0]  *Var[B] 
	   Add  *Var[1]  *Var[C] 
	   Wait     00000001 
	EndLoop
	Return
	End

#new:Script $Script_802209E8
	Set  *Var[1]  *Array[5] 
	Add  *Var[1]  00000001 
	Set  *Var[2]  *Array[0] 
	Set  *Var[3]  *Array[1] 
	Set  *Var[4]  *Array[5] 
	Add  *Var[4]  00000002 
	Set  *Var[5]  *Array[0] 
	Set  *Var[6]  *Array[1] 
	Set  *Var[7]  *Array[5] 
	Add  *Var[7]  00000003 
	Set  *Var[8]  *Array[0] 
	Set  *Var[9]  *Array[1] 
	Set  *Var[A]  *Array[5] 
	Add  *Var[A]  00000004 
	Set  *Var[B]  *Array[0] 
	Set  *Var[C]  *Array[1] 
	Call     EnableModel 	( *Var[1] .True )
	Call     EnableModel 	( *Var[4] .True )
	Call     EnableModel 	( *Var[7] .True )
	Call     EnableModel 	( *Var[A] .True )
	Loop     00000005 
	   Add  *Var[0]  00000001 
	   Add  *Var[2]  00000001 
	   Add  *Var[3]  00000001 
	   Call     TranslateModel ( *Var[1] *Var[2] *Var[0] *Var[3] )
	   Call     ScaleModel  	( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[5]  FFFFFFFF 
	   Add  *Var[6]  00000001 
	   Call     TranslateModel ( *Var[4] *Var[5] *Var[0] *Var[6] )
	   Call     ScaleModel  	( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[8]  00000001 
	   Add  *Var[9]  FFFFFFFF 
	   Call     TranslateModel ( *Var[7] *Var[8] *Var[0] *Var[9] )
	   Call     ScaleModel  	( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[B]  FFFFFFFF 
	   Add  *Var[C]  FFFFFFFF 
	   Call     TranslateModel ( *Var[A] *Var[B] *Var[0] *Var[C] )
	   Call     ScaleModel  	( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Wait     00000001 
	EndLoop
	Loop     00000005 
	   Add  *Var[0]  FFFFFFFF 
	   Add  *Var[2]  00000001 
	   Add  *Var[3]  00000001 
	   Call     TranslateModel ( *Var[1] *Var[2] *Var[0] *Var[3] )
	   Call     ScaleModel  	( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[5]  FFFFFFFF 
	   Add  *Var[6]  00000001 
	   Call     TranslateModel ( *Var[4] *Var[5] *Var[0] *Var[6] )
	   Call     ScaleModel  	( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[8]  00000001 
	   Add  *Var[9]  FFFFFFFF 
	   Call     TranslateModel ( *Var[7] *Var[8] *Var[0] *Var[9] )
	   Call     ScaleModel  	( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[B]  FFFFFFFF 
	   Add  *Var[C]  FFFFFFFF 
	   Call     TranslateModel ( *Var[A] *Var[B] *Var[0] *Var[C] )
	   Call     ScaleModel  	( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Wait     00000001 
	EndLoop
	Call     EnableModel 	( *Var[1] .False )
	Call     EnableModel 	( *Var[4] .False )
	Call     EnableModel 	( *Var[7] .False )
	Call     EnableModel 	( *Var[A] .False )
	Return
	End

#new:Script $Script_80220EB8
	SetGroup 00000000 
	UseArray *Var[A] 
	Set  *Var[5]  *Array[5] 
	Loop     00000005 
	   Call     CloneModel  	( 00000010 *Var[5] )
	   Call     TranslateModel ( *Var[5] *Array[0] *Array[2] *Array[1] )
	   Add  *Var[5]  00000001 
	EndLoop
	Label    00000000 
	Call     RandInt     	( 000000C8 *Var[0] )
	Add  *Var[0]  00000032 
	Wait     *Var[0] 
	Call     EnableModel 	( *Array[5] .True )
	Call     MakeLerp    	( *Array[2] *Array[3] *Array[4] 00000001 )
	Label    00000001 
	Call     UpdateLerp  	( )
	Call     TranslateModel ( *Array[5] *Array[0] *Var[0] *Array[1] )
	Wait     00000001 
	Call     $Function_802187B0 ( *Array[5] )
	If  *Var[2]  ==  00000001 
	   Goto     0000000A 
	EndIf
	If  *Var[1]  ==  00000001 
	   Goto     00000001 
	EndIf
	Label    0000000A 
	Call     EnableModel 	( *Array[5] .False )
	ExecWait $Script_802209E8 
	Goto     00000000 
	Return
	End

#new:Script $Script_80221080
	Set  *Var[F]  00002710 
	UseIntBuffer *Var[0] 
	Get1Int  *Var[1] 
	Loop     *Var[1] 
	   Get4Int  *Var[2] *Var[3] *Var[4] *Var[5] 
	   Get3Int  *Var[6] *Var[7] *Var[8] 
	   Get1Int  *Var[9] 
	   Loop     *Var[9] 
	      NewArray 00000006 *Var[A] 
	      UseArray *Var[A] 
	      Call     RandInt     	( *Var[4] *Var[B] )
	      Call     RandInt     	( *Var[5] *Var[C] )
	      Set  *Var[D]  *Var[2] 
	      Set  *Var[E]  *Var[3] 
	      Add  *Var[D]  *Var[B] 
	      Add  *Var[E]  *Var[C] 
	      Set  *Array[0]  *Var[D] 
	      Set  *Array[1]  *Var[E] 
	      Set  *Array[2]  *Var[6] 
	      Set  *Array[3]  *Var[7] 
	      Set  *Array[4]  *Var[8] 
	      Set  *Array[5]  *Var[F] 
	      ChildThread
	         Exec     $Script_80220EB8 
	      EndChildThread
	      Add  *Var[F]  00000005 
	   EndLoop
	EndLoop
	Call     EnableModel 	( 00000010 .False )
	Return
	End

#new:Unknown $???_8022123C
00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C 
00000004 

#new:Script $Script_BeforeBattle_80221260
	Call     SetSpriteShading 	( FFFFFFFF )
	Call     SetCamBGColor 	( 00000001 00000000 00000000 00000000 )
	Set  *Var[0]  $???_8022123C 
	Exec     $Script_80221080 
	Set  *Var[0]  0000000E 
	Set  *Var[1]  00000000 
	Set  *Var[2]  00000000 
	Set  *Var[3]  FFFFFE0C 
	Exec     $Script_80220740 
	Return
	End

#new:Script $Script_AfterBattle_80221304
	Return
	End

#new:Stage $Stage_80221314
$ASCII_802233C8  % tik_tex
$ASCII_802233B8  % tik_bt02_shape
$ASCII_802233A8  % tik_bt02_hit
$Script_BeforeBattle_80221260 
$Script_AfterBattle_80221304 
00000000 
00000000 
00000000 
00000000 
00000000 

PADDING: 8022133C to 80221340 (00621A2C to 00621A30)
00000000 

#new:Script $Script_80221340
	Set  *Var[1]  *Array[5] 
	Add  *Var[1]  00000001 
	Set  *Var[2]  *Array[0] 
	Set  *Var[3]  *Array[1] 
	Set  *Var[4]  *Array[5] 
	Add  *Var[4]  00000002 
	Set  *Var[5]  *Array[0] 
	Set  *Var[6]  *Array[1] 
	Set  *Var[7]  *Array[5] 
	Add  *Var[7]  00000003 
	Set  *Var[8]  *Array[0] 
	Set  *Var[9]  *Array[1] 
	Set  *Var[A]  *Array[5] 
	Add  *Var[A]  00000004 
	Set  *Var[B]  *Array[0] 
	Set  *Var[C]  *Array[1] 
	Call     EnableModel 	( *Var[1] .True )
	Call     EnableModel 	( *Var[4] .True )
	Call     EnableModel 	( *Var[7] .True )
	Call     EnableModel 	( *Var[A] .True )
	Loop     00000005 
	   Add  *Var[0]  00000001 
	   Add  *Var[2]  00000001 
	   Add  *Var[3]  00000001 
	   Call     TranslateModel ( *Var[1] *Var[2] *Var[0] *Var[3] )
	   Call     ScaleModel  	( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[5]  FFFFFFFF 
	   Add  *Var[6]  00000001 
	   Call     TranslateModel ( *Var[4] *Var[5] *Var[0] *Var[6] )
	   Call     ScaleModel  	( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[8]  00000001 
	   Add  *Var[9]  FFFFFFFF 
	   Call     TranslateModel ( *Var[7] *Var[8] *Var[0] *Var[9] )
	   Call     ScaleModel  	( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[B]  FFFFFFFF 
	   Add  *Var[C]  FFFFFFFF 
	   Call     TranslateModel ( *Var[A] *Var[B] *Var[0] *Var[C] )
	   Call     ScaleModel  	( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Wait     00000001 
	EndLoop
	Loop     00000005 
	   Add  *Var[0]  FFFFFFFF 
	   Add  *Var[2]  00000001 
	   Add  *Var[3]  00000001 
	   Call     TranslateModel ( *Var[1] *Var[2] *Var[0] *Var[3] )
	   Call     ScaleModel  	( *Var[1] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[5]  FFFFFFFF 
	   Add  *Var[6]  00000001 
	   Call     TranslateModel ( *Var[4] *Var[5] *Var[0] *Var[6] )
	   Call     ScaleModel  	( *Var[4] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[8]  00000001 
	   Add  *Var[9]  FFFFFFFF 
	   Call     TranslateModel ( *Var[7] *Var[8] *Var[0] *Var[9] )
	   Call     ScaleModel  	( *Var[7] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Add  *Var[B]  FFFFFFFF 
	   Add  *Var[C]  FFFFFFFF 
	   Call     TranslateModel ( *Var[A] *Var[B] *Var[0] *Var[C] )
	   Call     ScaleModel  	( *Var[A] *Fixed[0.5] *Fixed[0.5] *Fixed[0.5] )
	   Wait     00000001 
	EndLoop
	Call     EnableModel 	( *Var[1] .False )
	Call     EnableModel 	( *Var[4] .False )
	Call     EnableModel 	( *Var[7] .False )
	Call     EnableModel 	( *Var[A] .False )
	Return
	End

#new:Script $Script_80221810
	SetGroup 00000000 
	UseArray *Var[A] 
	Set  *Var[5]  *Array[5] 
	Loop     00000005 
	   Call     CloneModel  	( 00000012 *Var[5] )
	   Call     TranslateModel ( *Var[5] *Array[0] *Array[2] *Array[1] )
	   Add  *Var[5]  00000001 
	EndLoop
	Label    00000000 
	Call     RandInt     	( 000000C8 *Var[0] )
	Add  *Var[0]  00000032 
	Wait     *Var[0] 
	Call     EnableModel 	( *Array[5] .True )
	Call     MakeLerp    	( *Array[2] *Array[3] *Array[4] 00000001 )
	Label    00000001 
	Call     UpdateLerp  	( )
	Call     TranslateModel ( *Array[5] *Array[0] *Var[0] *Array[1] )
	Wait     00000001 
	Call     $Function_80218C50 ( *Array[5] )
	If  *Var[2]  ==  00000001 
	   Goto     0000000A 
	EndIf
	If  *Var[1]  ==  00000001 
	   Goto     00000001 
	EndIf
	Label    0000000A 
	Call     EnableModel 	( *Array[5] .False )
	ExecWait $Script_80221340 
	Goto     00000000 
	Return
	End

#new:Script $Script_802219D8
	Set  *Var[F]  00002710 
	UseIntBuffer *Var[0] 
	Get1Int  *Var[1] 
	Loop     *Var[1] 
	   Get4Int  *Var[2] *Var[3] *Var[4] *Var[5] 
	   Get3Int  *Var[6] *Var[7] *Var[8] 
	   Get1Int  *Var[9] 
	   Loop     *Var[9] 
	      NewArray 00000006 *Var[A] 
	      UseArray *Var[A] 
	      Call     RandInt     	( *Var[4] *Var[B] )
	      Call     RandInt     	( *Var[5] *Var[C] )
	      Set  *Var[D]  *Var[2] 
	      Set  *Var[E]  *Var[3] 
	      Add  *Var[D]  *Var[B] 
	      Add  *Var[E]  *Var[C] 
	      Set  *Array[0]  *Var[D] 
	      Set  *Array[1]  *Var[E] 
	      Set  *Array[2]  *Var[6] 
	      Set  *Array[3]  *Var[7] 
	      Set  *Array[4]  *Var[8] 
	      Set  *Array[5]  *Var[F] 
	      ChildThread
	         Exec     $Script_80221810 
	      EndChildThread
	      Add  *Var[F]  00000005 
	   EndLoop
	EndLoop
	Call     EnableModel 	( 00000012 .False )
	Return
	End

#new:Unknown $???_80221B94
00000001 FFFFFF9C FFFFFFCE 000000C8 00000064 000000C8 00000000 0000003C 
00000004 

#new:Script $Script_BeforeBattle_80221BB8
	Call     SetSpriteShading 	( FFFFFFFF )
	Call     SetCamBGColor 	( 00000001 00000000 00000000 00000000 )
	Set  *Var[0]  $???_80221B94 
	Exec     $Script_802219D8 
	Return
	End

#new:Script $Script_AfterBattle_80221C10
	Return
	End

#new:Stage $Stage_80221C20
$ASCII_802233F0  % tik_tex
$ASCII_802233E0  % tik_bt03_shape
$ASCII_802233D0  % tik_bt03_hit
$Script_BeforeBattle_80221BB8 
$Script_AfterBattle_80221C10 
00000000 
00000000 
00000000 
00000000 
00000000 

PADDING: 80221C48 to 80221C50 (00622338 to 00622340)
00000000 00000000 

% Origin: HEURISTIC
#new:Script $Script_80221C50
	Set  *Var[A]  *Var[0] 
	Label    00000000 
	Call     $Function_802190F0 ( 00000000 )
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	Wait     00000001 
	Loop     
	   Call     $Function_802190F0 ( 00000001 )
	   Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	   Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	   Wait     00000001 
	   If  *Var[B]  ==  00000001 
	      BreakLoop
	   EndIf
	EndLoop
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFF9 00000000 00000000 00000001 )
	Wait     00000005 
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFE5 00000000 00000000 00000001 )
	Wait     00000002 
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFFB 00000000 00000000 00000001 )
	Wait     00000003 
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	Wait     00000005 
	Loop     
	   Call     $Function_802190F0 ( 00000002 )
	   Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	   Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	   Wait     00000001 
	   If  *Var[B]  ==  00000002 
	      BreakLoop
	   EndIf
	EndLoop
	Call     RandInt     	( 00000050 *Var[B] )
	Add  *Var[B]  0000001E 
	Loop     *Var[B] 
	   Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	   Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	   Wait     00000001 
	EndLoop
	Call     RandInt     	( 00000005 *Var[0] )
	If  *Var[0]  !=  00000000 
	   Goto     00000000 
	EndIf
	Call     $Function_802190F0 ( 00000003 )
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	Wait     00000001 
	Loop     
	   Call     $Function_802190F0 ( 00000001 )
	   Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	   Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	   Wait     00000001 
	   If  *Var[B]  ==  00000001 
	      BreakLoop
	   EndIf
	EndLoop
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFF9 00000000 00000000 00000001 )
	Wait     00000005 
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFE5 00000000 00000000 00000001 )
	Wait     00000002 
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFFB 00000000 00000000 00000001 )
	Wait     00000003 
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	Wait     00000005 
	Loop     
	   Call     $Function_802190F0 ( 00000002 )
	   Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	   Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	   Wait     00000001 
	   If  *Var[B]  ==  00000002 
	      BreakLoop
	   EndIf
	EndLoop
	Call     RandInt     	( 00000050 *Var[B] )
	Add  *Var[B]  0000001E 
	Loop     *Var[B] 
	   Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
	   Call     RotateModel 	( *Var[A] FFFFFFEC 00000000 00000000 00000001 )
	   Wait     00000001 
	EndLoop
	Goto     00000000 
	Return
	End

#new:Script $Script_802222E0
	Set  *Var[A]  *Var[0] 
	Loop     
	   Call     TranslateModel ( *Var[A] 00000001 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000001 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000001 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000002 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000002 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000002 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000003 FFFFFFFE 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000003 FFFFFFFE 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000003 FFFFFFFD 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000003 FFFFFFFD 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000003 FFFFFFFD 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000003 FFFFFFFE 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000002 FFFFFFFE 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000002 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000001 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000001 00000001 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000001 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] FFFFFFFF 00000001 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] FFFFFFFF 00000001 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] FFFFFFFF 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] FFFFFFFF 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
	   Wait     00000002 
	EndLoop
	Return
	End

#new:IntTable $IntTable_80222684
00000000 FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFE FFFFFFFD FFFFFFFB FFFFFFF8 
FFFFFFF8 FFFFFFF9 FFFFFFFA FFFFFFFC FFFFFFFE FFFFFFFF 00000000 000000FF 

#new:Script $Script_802226C4
	Set  *Var[A]  *Var[0] 
	Set  *Var[B]  *Var[1] 
	Set  *Var[5]  00000005 
	UseIntBuffer $IntTable_80222684 
	Label    00000000 
	Get1Int  *Var[1] 
	If  *Var[1]  ==  000000FF 
	   UseIntBuffer $IntTable_80222684 
	   Get1Int  *Var[1] 
	EndIf
	Set  *Var[0]  *Var[5] 
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] 00000000 )
	Wait     00000001 
	Add  *Var[5]  00000001 
	Set  *Var[C]  *Var[B] 
	Sub  *Var[C]  00000014 
	If  *Var[5]  >  *Var[C] 
	   Goto     00000001 
	EndIf
	Set  *Var[0]  *Var[5] 
	Call     TranslateModel ( *Var[A] *Var[0] *Var[1] 00000000 )
	Wait     00000001 
	Add  *Var[5]  00000001 
	Set  *Var[C]  *Var[B] 
	Sub  *Var[C]  00000014 
	If  *Var[5]  >  *Var[C] 
	   Goto     00000001 
	EndIf
	Goto     00000000 
	Label    00000001 
	Set  *Var[2]  00000000 
	Loop     00000014 
	   Add  *Var[5]  00000001 
	   Sub  *Var[1]  00000002 
	   Set  *Var[0]  *Var[5] 
	   Call     TranslateModel ( *Var[A] *Var[0] *Var[1] 00000000 )
	   Wait     00000001 
	EndLoop
	Sub  *Var[5]  00000118 
	Set  *Var[1]  00000000 
	Goto     00000000 
	Return
	End

% Origin: HEURISTIC
#new:Script $Script_80222930
	Set  *Var[A]  *Var[0] 
	Loop     
	   Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFE 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFE 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFD 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFD 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFD 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFE 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFE 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 FFFFFFFF 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000001 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000001 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000001 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000001 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
	   Wait     00000002 
	   Call     TranslateModel ( *Var[A] 00000000 00000000 00000000 )
	   Wait     00000002 
	EndLoop
	Return
	End

#new:Script $Script_BeforeBattle_80222CD4
	Call     SetSpriteShading 	( FFFFFFFF )
	Call     SetCamBGColor 	( 00000001 00000000 00000000 00000000 )
	Thread
	   Set  *Var[0]  0000000F 
	   Exec     $Script_802222E0 
	   Wait     00000005 
	   Set  *Var[0]  00000010 
	   Exec     $Script_802222E0 
	   Wait     00000005 
	   Set  *Var[0]  00000011 
	   Exec     $Script_802222E0 
	EndThread
	Thread
	   Wait     00000005 
	   Set  *Var[0]  00000009 
	   Set  *Var[1]  00000091 
	   Exec     $Script_802226C4 
	   Set  *Var[0]  0000000A 
	   Set  *Var[1]  00000091 
	   Exec     $Script_802226C4 
	EndThread
	Set  *Var[0]  0000000C 
	Set  *Var[1]  0000003C 
	Exec     $Script_802226C4 
	Set  *Var[0]  0000000D 
	Set  *Var[1]  0000003C 
	Exec     $Script_802226C4 
	Return
	End

#new:Script $Script_AfterBattle_80222E58
	Return
	End

#new:Stage $Stage_80222E68
$ASCII_80223418  % tik_tex
$ASCII_80223408  % tik_bt04_shape
$ASCII_802233F8  % tik_bt04_hit
$Script_BeforeBattle_80222CD4 
$Script_AfterBattle_80222E58 
00000000 
00000000 
00000000 
00000000 
00000000 

#new:Script $Script_80222E90
	SetGroup 00000000 
	If  *Var[5]  ==  00000001 
	   If  *Var[6]  ==  00000001 
	      If  *Var[7]  ==  00000001 
	         If  *Var[8]  ==  00000001 
	            Call     $Function_80219540 ( )
	            Return
	         EndIf
	      EndIf
	   EndIf
	EndIf
	Call     $Function_80219664 ( )
	Return
	End

#new:Script $Script_BeforeBattle_80222F2C
	Call     SetSpriteShading 	( FFFFFFFF )
	Call     SetCamBGColor 	( 00000001 00000000 00000000 00000000 )
	Call     SetTexPanner 	( 0000000F 00000001 )
	Call     EnableTexPanning 	( 0000000F .True )
	Thread
	   Set  *Var[0]  00000001 
	   Set  *Var[1]  00000000 
	   Set  *Var[2]  FFFFF574 
	   Set  *Var[3]  00000000 
	   Set  *Var[4]  FFFFF448 
	   Set  *Var[5]  00000001 
	   Set  *Var[6]  00000001 
	   Set  *Var[7]  00000001 
	   Set  *Var[8]  00000001 
	   Set  *Var[9]  00000000 
	   Set  *Var[A]  00000000 
	   Set  *Var[B]  00000000 
	   Set  *Var[C]  00000000 
	   Exec     $Script_80222E90 
	EndThread
	Call     SetTexPanner 	( 00000010 00000002 )
	Call     EnableTexPanning 	( 00000010 .True )
	Thread
	   Set  *Var[0]  00000002 
	   Set  *Var[1]  00000032 
	   Set  *Var[2]  FFFFFF38 
	   Set  *Var[3]  0000006E 
	   Set  *Var[4]  FFFFFE0C 
	   Set  *Var[5]  00000001 
	   Set  *Var[6]  00000001 
	   Set  *Var[7]  00000001 
	   Set  *Var[8]  00000001 
	   Set  *Var[9]  00000000 
	   Set  *Var[A]  00000000 
	   Set  *Var[B]  00000000 
	   Set  *Var[C]  00000000 
	   Exec     $Script_80222E90 
	EndThread
	Return
	End

#new:Script $Script_AfterBattle_80223190
	Return
	End

#new:ForegroundModelList $ForegroundModelList_802231A0
0000000F 00000000 

#new:Stage $Stage_802231A8
$ASCII_80223440  % tik_tex
$ASCII_80223430  % tik_bt05_shape
$ASCII_80223420  % tik_bt05_hit
$Script_BeforeBattle_80222F2C 
$Script_AfterBattle_80223190 
00000000 
$ForegroundModelList_802231A0 
00000000 
00000000 
00000000 

#new:Formation $Formation_00
$Swooper 0000000D 0000000A 00000000 00000000 00000000 00000000 
$Swooper 0000000E 00000009 00000000 00000000 00000000 00000000 

#new:Formation $Formation_01
$Swooper 0000000C 0000000A 00000000 00000000 00000000 00000000 
$Swooper 0000000D 00000009 00000000 00000000 00000000 00000000 
$Swooper 0000000E 00000008 00000000 00000000 00000000 00000000 

#new:Formation $Formation_02
$Swoopula 0000000D 0000000A 00000000 00000000 00000000 00000000 
$Swoopula 0000000E 00000009 00000000 00000000 00000000 00000000 

#new:Formation $Formation_03
$Swoopula 0000000C 0000000A 00000000 00000000 00000000 00000000 
$Swoopula 0000000D 00000009 00000000 00000000 00000000 00000000 
$Swoopula 0000000E 00000008 00000000 00000000 00000000 00000000 

#new:FormationTable $FormationTable
$SJIS_8022347C 00000002 $Formation_00 $Stage_80220714 00000000 % unused
$SJIS_80223470 00000003 $Formation_01 $Stage_80220714 00000000 % unused
$SJIS_8022345C 00000002 $Formation_02 $Stage_80220714 00000000 % unused
$SJIS_80223448 00000003 $Formation_03 $Stage_80220714 00000000 % unused
00000000 00000000 00000000 00000000 00000000 % unused

#new:StageTable $StageTable
$ASCII_802234A8 $Stage_80220714 
$ASCII_802234A0 $Stage_80221314 
$ASCII_80223498 $Stage_80221C20 
$ASCII_80223490 $Stage_80222E68 
$ASCII_80223488 $Stage_802231A8 
00000000 00000000 

PADDING: 8022337C to 80223380 (00623A6C to 00623A70)
00000000 

#new:ASCII $ASCII_80223380
tik_bt01_hit

#new:ASCII $ASCII_80223390
tik_bt01_shape

#new:ASCII $ASCII_802233A0
tik_tex

#new:ASCII $ASCII_802233A8
tik_bt02_hit

#new:ASCII $ASCII_802233B8
tik_bt02_shape

#new:ASCII $ASCII_802233C8
tik_tex

#new:ASCII $ASCII_802233D0
tik_bt03_hit

#new:ASCII $ASCII_802233E0
tik_bt03_shape

#new:ASCII $ASCII_802233F0
tik_tex

#new:ASCII $ASCII_802233F8
tik_bt04_hit

#new:ASCII $ASCII_80223408
tik_bt04_shape

#new:ASCII $ASCII_80223418
tik_tex

#new:ASCII $ASCII_80223420
tik_bt05_hit

#new:ASCII $ASCII_80223430
tik_bt05_shape

#new:ASCII $ASCII_80223440
tik_tex

#new:SJIS $SJIS_80223448
% basabasachururux3
836F8354 836F8354 83608385 838B838B 78825200 

#new:SJIS $SJIS_8022345C
% basabasachururux2
836F8354 836F8354 83608385 838B838B 78825100 

#new:SJIS $SJIS_80223470
% basabasax3
836F8354 836F8354 78825200 

#new:SJIS $SJIS_8022347C
% basabasax2
836F8354 836F8354 78825100 

#new:ASCII $ASCII_80223488
tik_05

#new:ASCII $ASCII_80223490
tik_04

#new:ASCII $ASCII_80223498
tik_03

#new:ASCII $ASCII_802234A0
tik_02

#new:ASCII $ASCII_802234A8
tik_01

